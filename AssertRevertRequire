// SPDX-License-Identifier: MIT
pragma solidity >=0.6.12 <0.9.0;

contract AssertRevertRequired {
    address public owner;
    uint256 public totalValue;

    constructor() {
        owner = msg.sender;
    }

    function deposit(uint256 amount) external {
        // Ensure only the contract owner can deposit
        require(msg.sender == owner, "Only owner can deposit");
        
        // Ensure the deposit amount is positive
        require(amount > 0, "Deposit amount must be greater than zero");

        // Update totalValue with the deposit amount
        totalValue += amount;
    }

    function withdraw(uint256 amount) external {
        // Ensure the withdrawal amount is not greater than the contract's balance
        require(amount <= address(this).balance, "Insufficient balance");

        // Ensure the withdrawal amount is positive
        require(amount > 0, "Withdrawal amount must be greater than zero");

        // Ensure the caller is the contract owner
        if (msg.sender != owner) {
            revert("Unauthorized access");
        }

        // Assert that the subtraction does not cause underflow
        assert(totalValue >= amount);

        // Perform the withdrawal
        payable(owner).transfer(amount);

        // Update totalValue
        totalValue -= amount;
    }
}
